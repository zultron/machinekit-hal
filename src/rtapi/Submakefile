INCLUDES += rtapi rtapi_export rtapi/flavor

# this covers the userpci and shmdrv directories too, in a bit cludgy way
../include/%.h: ./rtapi/%.h
	$(ECHO) Copying header file $@
	$(Q)cp  $^ $@

../include/%.hh: ./rtapi/%.hh
	$(ECHO) Copying header file $@
	$(Q)cp  $^ $@

../include/%.h: ./rtapi/shmdrv/%.h
	$(ECHO) Copying header file $@
	@mkdir -p ../include/shmdrv
	$(Q)cp  $^ $@

../include/%.h: ./rtapi/flavor/%.h
	$(ECHO) Copying header file $@
	@mkdir -p ../include/flavor
	$(Q)cp  $^ $@

ifeq ($(HAVE_XENOMAI2_THREADS),yes)
XENOMAI_SRC = rtapi/flavor/xenomai2.c
XENOMAI_HEADER = rtapi/flavor/xenomai2.h
endif

HEADERS += \
	rtapi/flavor/rtapi_flavor.h \
	rtapi/flavor/rt-preempt.h \
	$(XENOMAI_HEADER)

##########################################
# Clean up
modclean:  modclean-rtapi
modclean-rtapi:
	rm -f ../libexec/rtapi_app
.PHONY:  modclean-rtapi


##########################################
# Common to both RTAPI and ULAPI

# Sources/objects included in both RTAPI and ULAPI
XXAPI_COMMON_SRCS := $(patsubst %, rtapi/%, \
	rtapi.c \
	rtapi_support.c \
	rtapi_hexdump.c \
	rtapi_task.c \
	rtapi_shmem.c \
	rtapi_time.c \
	rtapi_exception.c \
	rtapi_heap.c \
	rtapi_compat.c \
	flavor/rtapi_flavor.c \
	flavor/rtapi_flavor_hook_wrappers.c \
	)

# rtapi_compat needs to know where rtapi.ini lives
%/rtapi_compat.o:  \
	EXTRAFLAGS += -DHAL_SYSTEM_CONFIG_DIR=\"$(HAL_SYSTEM_CONFIG_DIR)\"
%/rtapi_compat.o:  \
	EXTRA_CFLAGS += -DHAL_SYSTEM_CONFIG_DIR=\"$(HAL_SYSTEM_CONFIG_DIR)\"

##################################################################
#                 The ulapi library
##################################################################

ULAPI_SRCS := \
	rtapi/flavor/ulapi.c \
	rtapi/rtapi_hexdump.c \
	$(XXAPI_COMMON_SRCS)

USERSRCS += $(ULAPI_SRCS)

ULAPI_LIB := ../lib/libhalulapi.so

$(call TOOBJSDEPS, $(ULAPI_SRCS)): EXTRAFLAGS += -fPIC

$(ULAPI_LIB).0: $(call TOOBJS, $(ULAPI_SRCS)) \
	../lib/libmkini.so \
	../lib/liblinuxcncshm.so
	$(ECHO) Creating shared library $(notdir $@)
	@mkdir -p ../lib
	@rm -f $@
	$(Q)$(CC) $(LDFLAGS) -Wl,-rpath,$(HAL_RTLIB_DIR) \
	    -Wl,-soname,$(notdir $@) -shared \
	    -o $@ $^ -ldl

TARGETS += $(ULAPI_LIB) $(ULAPI_LIB).0

##################################################################
#               rtapi.so and flavor modules
##################################################################

ifeq ($(HAVE_SYS_IO),yes)
PCI_SRC:= rtapi/rtapi_pci.c
else
PCI_SRC:=
endif

$(eval $(call c_comp_build_rules,rtapi/rtapi.o,$(patsubst %.c,%.o,\
	$(XXAPI_COMMON_SRCS) \
	rtapi/flavor/rt-preempt.c \
	$(XENOMAI_SRC) \
	$(PCI_SRC) \
	machinetalk/support/nanopb.c \
	machinetalk/nanopb/pb_decode.c \
	machinetalk/nanopb/pb_encode.c \
	machinetalk/nanopb/pb_common.c \
)))

ifeq ($(HAVE_SYS_IO),yes)
# compile userland PCI support with udev cflags if any
$(call TORTOBJS, rtapi/rtapi_pci.c): EXTRAFLAGS += $(LIBUDEV_CFLAGS)
endif

$(call TORTOBJS, rtapi/flavor/rt-preempt.c): \
	EXTRAFLAGS += $(LIBCGROUP_CFLAGS)

# userland PCI support needs -ludev for rtapi.so
$(RTLIBDIR)/rtapi.so: EXTRA_LDFLAGS += \
	$(LIBUDEV_LIBS) $(RT_LDFLAGS) $(LIBCGROUP_LIBS)

ifeq ($(HAVE_XENOMAI2_THREADS),yes)
# Build xenomai2_loader.so linked to Xenomai libs
$(eval $(call c_comp_build_rules,rtapi/flavor/xenomai2_loader.o))
$(RTLIBDIR)/xenomai2_loader.so: \
	EXTRA_LDFLAGS += $(XENOMAI_LDFLAGS)

# Set Xenomai CFLAGS
$(call TORTOBJS, $(XENOMAI_SRC)): \
	EXTRA_CFLAGS += $(XENOMAI_RTFLAGS)
$(call TORTOBJS, rtapi/flavor/xenomai2_loader.c): \
	EXTRA_CFLAGS += $(XENOMAI_RTFLAGS)
endif

##################################################################
#                        rtapi_app
##################################################################
# rtapi_app
#
# One rtapi_app is built for all userland thread flavors.
#
# rtapi_app requires two sources plus one already in ulapi.so.

# rtapi_app symbols, and the "RT space" (components loaded via dlopen(3))
#------------------------------------------------------------------------
#
# The HAL and RTAPI API's were devised to work in-kernel and obey its
# visibility rules. Running 'userland shared objects' came later - first
# through the 'simulator' rtapi_app which eventually evolved into a full
# replacement of the kernel HAL/RTAPI environment including running
# RT threads and drivers.
#
# Hence, running components in a user process like rtapi_app
# requires that symbol visibility follows similar rules - meaning for instance
# that API symbols (like eg hal_init()) must be exported explicitly with
# EXPORT_SYMBOL(hal_init) to enable referring to this function from say
# a component (see also the lengthy note in src/Makefile which explains
# how this controlled export of API symbols is achieved).
# This assures that inter-component symbol resolution is limited to explicit
# API functions and no accidential symbol resolution can happen.
#
# Note these 'RT objects' (really shared libraries) run in the context of
# the rtapi_app process and hence shares symbols between rtapi_app
# and the RT objects. This introduces the chance that symbols used and
# (and maybe accidentially exported by) rtapi_app are carried over into
# the symbol set seen by the RT objects.
#
# This is undesirable - the symbol spaces by rtapi_app and by the RT objects
# must be decoupled as much as possible. This is achieved as follows:
# - in rtapi_app.cc care is taken not to accidentially export global variables or functions
#   practically everything within rtapi_app.cc should be static so
#   symbols do not leak outside rtapi_app
# - linking of rtapi_app, and flags to dlopen() are critical to this step.
#   NEVER use the -rdynamic flag with rtapi_app to avoid spilling rtapi_app
#   symbols into RT space
#
# see for instance: http://stackoverflow.com/questions/20491130/impact-disadvantages-of-rdynamic-gcc-option
# Q: What are the disadvantages of 'rdynamic' ..?
#
# A: rdynamic can be used with dlopen() to have a shared/global symbol table
# for the executable which was a must in my project (dynamic_cast<> will work
# across SO boundaries). The downside is function name collision between SOs.
#
# a good example for this separation is the rtapi_print_msg function which
# logs messages to the log ring buffer, tagging the message with an origin
# tag: log messages from rtapi_app.cc should be tagged MSG_ORIGIN_USER,
# whereas log messages from RT objects should be tagged MSG_ORIGIN_RT.
#
# To that end rtapi_print_msg is available TWICE within a running HAL application:
# - once compiled with -DULAPI -URTAPI and linked into rtapi_app, causing
#   its log messages to be tagged with MSG_ORIGIN_USER
# - once compiled with -DRTAPI -UULAPI and linked into the (flavor specific)
#   rtapi.so which serves logging for RT objects.
#
# the following startup log fragment shows this at work:
#
#1. Feb 24 07:25:09 jessie64n msgd:0: rtapi_app:10219:user rtapi: loaded from rtapi.so
#2. Feb 24 07:25:09 jessie64n msgd:0: rtapi:10219:rt rtapi_app_main:196 HAL: initializing RT hal_lib support
#3. Feb 24 07:25:09 jessie64n msgd:0: hal_lib:10219:rt hal_xinit:68 HAL: initializing component 'hal_lib' type=4 arg1=0 arg2=0/0x0
#...
#4. Feb 24 07:25:09 jessie64n msgd:0: rtapi_app:10219:user hal_lib: loaded from hal_lib.so
#
# (1) originates from rtapi_app and uses the rtapi_print_msg function compiled with -DULAPI,
# and linked into rtapi_app. Telltale: ':user' tag on the log message.
#
# (2) and (3) originate from RT objects (rtapi.so and hal_lib.so respectively)
# and use the rtapi_print_msg code linked (and explicitily exported with EXPORT_SYMBOL)
# from rtapi.so. Telltale: ":rt" tag on the log message.
#
# this is what happens if you accidentially link rtapi_app with the -rdynamic flag:
#
#1. Feb 23 23:46:11 jessie64n msgd:0: rtapi:18240:user RTAPI:0  posix unknown init
#2. Feb 23 23:46:11 jessie64n msgd:0: rtapi:18240:user rtapi: loaded from rtapi.so
#3. Feb 23 23:46:11 jessie64n msgd:0: hal_lib:18240:user hal_xinit:68 HAL: initializing component 'hal_lib' type=4 arg1=0 arg2=0/0x0
#4. Feb 23 23:46:11 jessie64n msgd:0: hal_lib:18240:user hal_export_xfunctfv:70 HAL: exporting function 'newinst' type 2
#
# note ':user' origin tag on all log entries - this means that despite explicit
# export of rtapi_print_msg with EXPORT_SYMBOL(rtapi_print_msg) for use within RT
# the -DULAPI version of rtapi_print_msg linked into rtapi_app is called from
# RT objects. This means that other symbols accidentially exported by rtapi_app
# could resolve first instead of with the RT symbol space, which is undesirable.


RTAPI_APP_SRCS := \
	rtapi/rtapi_app.cc \
	rtapi/rtapi_support.c \
	rtapi/rtapi_compat.c

USERSRCS += $(RTAPI_APP_SRCS)

# RIP builds need to add LIB_DIR as an rpath, since LD_LIBRARY_PATH
# isn't honored for setuid executables.
ifeq ($(RUN_IN_PLACE),yes)
RTAPI_APP_RPATH=-Wl,-rpath,$(LIB_DIR)
endif

$(call TOOBJSDEPS, rtapi/rtapi_app.cc): \
	EXTRAFLAGS = $(PROTOBUF_CFLAGS) $(CZMQ_CFLAGS) $(LTTNG_UST_CFLAGS)

../libexec/rtapi_app: \
	$(call TOOBJS, $(RTAPI_APP_SRCS)) \
	../lib/libmkini.so.0 \
	../lib/liblinuxcncshm.so \
	../lib/libmtalk.so.0 \
	../lib/libmachinetalk-pb2++.so.0 \
	../lib/librtapi_math.so.0
	$(ECHO) Linking $(notdir $@)
	@mkdir -p $(dir $@)
	$(Q)$(CXX) -Wl,--no-as-needed \
	    -Wl,-rpath,$(HAL_RTLIB_DIR) \
	    $(RTAPI_APP_RPATH) \
	    -o $@ \
	    $^ \
	    $(LDFLAGS) \
	    $(LIBUDEV_LIBS) \
	    $(PROTOBUF_LIBS) $(CZMQ_LIBS) $(LTTNG_UST_LIBS) \
	    -lstdc++ -ldl -luuid

#	$(LIBBACKTRACE) # already linked into libmtalk

modules:  ../libexec/rtapi_app

##################################################################
#                     the rtapi message demon
##################################################################

RTAPI_MSGD_SRCS =  \
	rtapi/rtapi_msgd.cc \
	rtapi/rtapi_heap.c \
	rtapi/rtapi_compat.c \
	rtapi/rtapi_support.c

RTAPI_MSGD_OBJS := $(call TOOBJS, $(RTAPI_MSGD_SRCS))

$(call TOOBJS, rtapi/rtapi_msgd.cc): \
	CXXFLAGS += -DGIT_BUILD_SHA=\"'$(GIT_BUILD_SHA)'\"

RTAPI_MSGD_CFLAGS := \
	$(PROTOBUF_CFLAGS) $(CZMQ_CFLAGS) $(AVAHI_CFLAGS)

RTAPI_MSGD_LDFLAGS := \
	$(PROTOBUF_LIBS) $(CZMQ_LIBS) $(AVAHI_LIBS) \
	-lstdc++ -ldl -luuid -latomic -lzmq

#	$(LIBBACKTRACE) # already linked into libmtalk

$(call TOOBJSDEPS, $(RTAPI_MSGD_SRCS)): \
	EXTRAFLAGS +=  $(RTAPI_MSGD_CFLAGS)

../libexec/rtapi_msgd: $(RTAPI_MSGD_OBJS) \
	../lib/liblinuxcncshm.so \
	../lib/libmkini.so \
	../lib/libmtalk.so.0 \
	../lib/libmachinetalk-pb2++.so
	$(ECHO) Linking $(notdir $@)
	@mkdir -p $(dir $@)
	$(Q)$(CC)  $(LDFLAGS) -o $@ $^ $(RTAPI_MSGD_LDFLAGS) -lrt $(ZMQ_LIBS)

USERSRCS += $(RTAPI_MSGD_SRCS)
TARGETS += ../libexec/rtapi_msgd

##################################################################
#                     rtapi.ini config file
##################################################################

../etc/machinekit/rtapi.ini: ../scripts/gen-rtapi.ini.sh
	@mkdir -p $(dir $@)
	bash $< > $@
TARGETS += ../etc/machinekit/rtapi.ini


##################################################################
#                     C unit tests
##################################################################

# ULAPI: use -DULAPI XXAPI_COMMON_SRCS
$(eval $(call setup_test,rtapi/tests/rtapi_flavor, ULAPI,\
  $(XXAPI_COMMON_SRCS).c rtapi/flavor/ulapi.c,\
  , \
  ../lib/liblinuxcncshm.so ../lib/libmkini.so, \
  , \
  flavor_can_run_flavor getenv))

# RTAPI: use -DRTAPI XXAPI_COMMON_SRCS; link in pthreads and libcgroup
$(eval $(call setup_test,rtapi/tests/rtapi_flavor, RTAPI,\
  rtapi/flavor/ulapi.c, \
  $(XXAPI_COMMON_SRCS) rtapi/flavor/rt-preempt.c $(XENOMAI_SRC), \
  ../lib/liblinuxcncshm.so ../lib/libmkini.so, \
  -pthread $(LIBCGROUP_LIBS), \
  flavor_can_run_flavor getenv))
